
STM32G0_LORA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e84  08000e84  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000e84  08000e84  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e84  08000e84  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000018  08000ea4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08000ea4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dd7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b64  00000000  00000000  00021e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00022980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00022b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f8c2  00000000  00000000  00022cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000038b1  00000000  00000000  0003257a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000542c2  00000000  00000000  00035e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008a0ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003f8  00000000  00000000  0008a140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000e18 	.word	0x08000e18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08000e18 	.word	0x08000e18

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <CLOCK_MANAGER_Initialize>:
******************************************/

#include <stm32g071xx.h>
#include "clock_config.h"

void CLOCK_MANAGER_Initialize(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

RCC->IOPENR |= RCC_IOPENR_GPIOAEN; 		//Open clock for GPIOA
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 800040a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 800040e:	2101      	movs	r1, #1
 8000410:	430a      	orrs	r2, r1
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
RCC->IOPENR |= RCC_IOPENR_GPIOBEN; 		//Open clock for GPIOB
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 8000416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 800041a:	2102      	movs	r1, #2
 800041c:	430a      	orrs	r2, r1
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
RCC->IOPENR |= RCC_IOPENR_GPIOCEN; 		//Open clock for GPIOC
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 8000422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 8000426:	2104      	movs	r1, #4
 8000428:	430a      	orrs	r2, r1
 800042a:	635a      	str	r2, [r3, #52]	; 0x34
RCC->APBENR2 |= RCC_APBENR2_USART1EN; 	//Open clock for UART1
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 800042e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <CLOCK_MANAGER_Initialize+0x3c>)
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	01c9      	lsls	r1, r1, #7
 8000436:	430a      	orrs	r2, r1
 8000438:	641a      	str	r2, [r3, #64]	; 0x40

}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	0002      	movs	r2, r0
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b7f      	cmp	r3, #127	; 0x7f
 8000456:	d809      	bhi.n	800046c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	001a      	movs	r2, r3
 800045e:	231f      	movs	r3, #31
 8000460:	401a      	ands	r2, r3
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <__NVIC_EnableIRQ+0x30>)
 8000464:	2101      	movs	r1, #1
 8000466:	4091      	lsls	r1, r2
 8000468:	000a      	movs	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}
 8000474:	e000e100 	.word	0xe000e100

08000478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	0002      	movs	r2, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b7f      	cmp	r3, #127	; 0x7f
 800048c:	d828      	bhi.n	80004e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048e:	4a2f      	ldr	r2, [pc, #188]	; (800054c <__NVIC_SetPriority+0xd4>)
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	b25b      	sxtb	r3, r3
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	33c0      	adds	r3, #192	; 0xc0
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	589b      	ldr	r3, [r3, r2]
 800049e:	1dfa      	adds	r2, r7, #7
 80004a0:	7812      	ldrb	r2, [r2, #0]
 80004a2:	0011      	movs	r1, r2
 80004a4:	2203      	movs	r2, #3
 80004a6:	400a      	ands	r2, r1
 80004a8:	00d2      	lsls	r2, r2, #3
 80004aa:	21ff      	movs	r1, #255	; 0xff
 80004ac:	4091      	lsls	r1, r2
 80004ae:	000a      	movs	r2, r1
 80004b0:	43d2      	mvns	r2, r2
 80004b2:	401a      	ands	r2, r3
 80004b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	019b      	lsls	r3, r3, #6
 80004ba:	22ff      	movs	r2, #255	; 0xff
 80004bc:	401a      	ands	r2, r3
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	0018      	movs	r0, r3
 80004c4:	2303      	movs	r3, #3
 80004c6:	4003      	ands	r3, r0
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004cc:	481f      	ldr	r0, [pc, #124]	; (800054c <__NVIC_SetPriority+0xd4>)
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	089b      	lsrs	r3, r3, #2
 80004d6:	430a      	orrs	r2, r1
 80004d8:	33c0      	adds	r3, #192	; 0xc0
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004de:	e031      	b.n	8000544 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e0:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <__NVIC_SetPriority+0xd8>)
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	0019      	movs	r1, r3
 80004e8:	230f      	movs	r3, #15
 80004ea:	400b      	ands	r3, r1
 80004ec:	3b08      	subs	r3, #8
 80004ee:	089b      	lsrs	r3, r3, #2
 80004f0:	3306      	adds	r3, #6
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	18d3      	adds	r3, r2, r3
 80004f6:	3304      	adds	r3, #4
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1dfa      	adds	r2, r7, #7
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	0011      	movs	r1, r2
 8000500:	2203      	movs	r2, #3
 8000502:	400a      	ands	r2, r1
 8000504:	00d2      	lsls	r2, r2, #3
 8000506:	21ff      	movs	r1, #255	; 0xff
 8000508:	4091      	lsls	r1, r2
 800050a:	000a      	movs	r2, r1
 800050c:	43d2      	mvns	r2, r2
 800050e:	401a      	ands	r2, r3
 8000510:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	019b      	lsls	r3, r3, #6
 8000516:	22ff      	movs	r2, #255	; 0xff
 8000518:	401a      	ands	r2, r3
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	0018      	movs	r0, r3
 8000520:	2303      	movs	r3, #3
 8000522:	4003      	ands	r3, r0
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <__NVIC_SetPriority+0xd8>)
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	001c      	movs	r4, r3
 8000530:	230f      	movs	r3, #15
 8000532:	4023      	ands	r3, r4
 8000534:	3b08      	subs	r3, #8
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	430a      	orrs	r2, r1
 800053a:	3306      	adds	r3, #6
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	18c3      	adds	r3, r0, r3
 8000540:	3304      	adds	r3, #4
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b003      	add	sp, #12
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	e000e100 	.word	0xe000e100
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <INTERRUPT_MANAGER_Initialize>:
******************************************/

#include <stm32g071xx.h>
#include "interrupt_config.h"

void INTERRUPT_MANAGER_Initialize(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
/* UART1 interrupt init*/
 NVIC_SetPriority(USART1_IRQn, 2);
 8000558:	2102      	movs	r1, #2
 800055a:	201b      	movs	r0, #27
 800055c:	f7ff ff8c 	bl	8000478 <__NVIC_SetPriority>
 NVIC_EnableIRQ(USART1_IRQn);
 8000560:	201b      	movs	r0, #27
 8000562:	f7ff ff6f 	bl	8000444 <__NVIC_EnableIRQ>
 
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <PIN_MANAGER_Initialize>:
******************************************/

#include <stm32g071xx.h>
#include "pin_config.h"

void PIN_MANAGER_Initialize(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
/*** set OUT fuction mode (0b01)***/
/*  PA2 set Out for LED2 LORA module*/
GPIOA->MODER &= ~GPIO_MODER_MODE2_1;
 8000570:	23a0      	movs	r3, #160	; 0xa0
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	23a0      	movs	r3, #160	; 0xa0
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	2120      	movs	r1, #32
 800057c:	438a      	bics	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
/* PA6 set Out for LED1 LORA module */
GPIOA->MODER &= ~GPIO_MODER_MODE6_1;
 8000580:	23a0      	movs	r3, #160	; 0xa0
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	23a0      	movs	r3, #160	; 0xa0
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	493b      	ldr	r1, [pc, #236]	; (8000678 <PIN_MANAGER_Initialize+0x10c>)
 800058c:	400a      	ands	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
/* PA9 set Out for M0 LORA module */
GPIOA->MODER &= ~GPIO_MODER_MODE9_1;
 8000590:	23a0      	movs	r3, #160	; 0xa0
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	23a0      	movs	r3, #160	; 0xa0
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	4938      	ldr	r1, [pc, #224]	; (800067c <PIN_MANAGER_Initialize+0x110>)
 800059c:	400a      	ands	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
/* PB9 set Out for M1 LORA module */
GPIOB->MODER &= ~GPIO_MODER_MODE9_1;
 80005a0:	4b37      	ldr	r3, [pc, #220]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b36      	ldr	r3, [pc, #216]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005a6:	4935      	ldr	r1, [pc, #212]	; (800067c <PIN_MANAGER_Initialize+0x110>)
 80005a8:	400a      	ands	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
/* PA8 set Out for LED MCU Board */
GPIOA->MODER &= ~GPIO_MODER_MODE8_1;
 80005ac:	23a0      	movs	r3, #160	; 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	23a0      	movs	r3, #160	; 0xa0
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	4933      	ldr	r1, [pc, #204]	; (8000684 <PIN_MANAGER_Initialize+0x118>)
 80005b8:	400a      	ands	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
/* set M0 - PA9 and M1 - PB9 to HIGH - for MODE 3 LORA*/
GPIOA->BSRR |= GPIO_BSRR_BS9 ;
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0089      	lsls	r1, r1, #2
 80005ca:	430a      	orrs	r2, r1
 80005cc:	619a      	str	r2, [r3, #24]
GPIOB->BSRR |= GPIO_BSRR_BS9 ;
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0089      	lsls	r1, r1, #2
 80005d8:	430a      	orrs	r2, r1
 80005da:	619a      	str	r2, [r3, #24]
/*** set INPUT fuction mode (0b00)***/
/* PB8 set INPUT for AUX LORA module */
GPIOB->MODER &= ~(GPIO_MODER_MODE8_0 | GPIO_MODER_MODE8_1);
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005e2:	4929      	ldr	r1, [pc, #164]	; (8000688 <PIN_MANAGER_Initialize+0x11c>)
 80005e4:	400a      	ands	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
/* set Pull-Up for PB8 (0b01) */
GPIOB->PUPDR |= GPIO_PUPDR_PUPD8_0 ;
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0249      	lsls	r1, r1, #9
 80005f2:	430a      	orrs	r2, r1
 80005f4:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD8_1;
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005f8:	68da      	ldr	r2, [r3, #12]
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 80005fc:	4921      	ldr	r1, [pc, #132]	; (8000684 <PIN_MANAGER_Initialize+0x118>)
 80005fe:	400a      	ands	r2, r1
 8000600:	60da      	str	r2, [r3, #12]

/*** set Alternate fuction mode (0b10) ***/
/* PB6 for TX UART1*/
GPIOB->MODER |= GPIO_MODER_MODE6_1 ;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0189      	lsls	r1, r1, #6
 800060c:	430a      	orrs	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
GPIOB->MODER &= ~(GPIO_MODER_MODE6_0);
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <PIN_MANAGER_Initialize+0x114>)
 8000616:	491d      	ldr	r1, [pc, #116]	; (800068c <PIN_MANAGER_Initialize+0x120>)
 8000618:	400a      	ands	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
/*PA10 for RX UART1*/
GPIOA->MODER |= GPIO_MODER_MODE10_1 ;
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	0389      	lsls	r1, r1, #14
 800062a:	430a      	orrs	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
GPIOA->MODER &= ~(GPIO_MODER_MODE10_0);
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	4915      	ldr	r1, [pc, #84]	; (8000690 <PIN_MANAGER_Initialize+0x124>)
 800063a:	400a      	ands	r2, r1
 800063c:	601a      	str	r2, [r3, #0]

/*** set for UART1 ***/
/* for PB6 (0b0000) */
GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL6) ; // clear
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	6a1a      	ldr	r2, [r3, #32]
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	4912      	ldr	r1, [pc, #72]	; (8000694 <PIN_MANAGER_Initialize+0x128>)
 800064a:	400a      	ands	r2, r1
 800064c:	621a      	str	r2, [r3, #32]
/* for PA10  (0b0001) */
GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL10) ; // clear
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	490f      	ldr	r1, [pc, #60]	; (8000698 <PIN_MANAGER_Initialize+0x12c>)
 800065a:	400a      	ands	r2, r1
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
GPIOA->AFR[1] |= GPIO_AFRH_AFSEL10_0 ; //set
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0049      	lsls	r1, r1, #1
 800066c:	430a      	orrs	r2, r1
 800066e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	ffffdfff 	.word	0xffffdfff
 800067c:	fff7ffff 	.word	0xfff7ffff
 8000680:	50000400 	.word	0x50000400
 8000684:	fffdffff 	.word	0xfffdffff
 8000688:	fffcffff 	.word	0xfffcffff
 800068c:	ffffefff 	.word	0xffffefff
 8000690:	ffefffff 	.word	0xffefffff
 8000694:	f0ffffff 	.word	0xf0ffffff
 8000698:	fffff0ff 	.word	0xfffff0ff

0800069c <SYSTEM_MANAGER_Initialize>:
#include "system_config.h"
#include "interrupt_config.h"
#include "uart_config.h"


void SYSTEM_MANAGER_Initialize(void){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

CLOCK_MANAGER_Initialize();
 80006a0:	f7ff feb0 	bl	8000404 <CLOCK_MANAGER_Initialize>
PIN_MANAGER_Initialize();
 80006a4:	f7ff ff62 	bl	800056c <PIN_MANAGER_Initialize>
UART1_MANAGER_Initialize();
 80006a8:	f000 f806 	bl	80006b8 <UART1_MANAGER_Initialize>
INTERRUPT_MANAGER_Initialize();
 80006ac:	f7ff ff52 	bl	8000554 <INTERRUPT_MANAGER_Initialize>

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <UART1_MANAGER_Initialize>:

#include <stm32g071xx.h>
#include "uart_config.h"


void UART1_MANAGER_Initialize(void){
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	USART1->CR1 &= ~USART_CR1_UE ; // Disable UART1
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	438a      	bics	r2, r1
 80006c6:	601a      	str	r2, [r3, #0]

	asm("nop");
 80006c8:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80006ca:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80006cc:	46c0      	nop			; (mov r8, r8)

	USART1->BRR = SystemCoreClock / UART_SPEED; // set baud rate - 16MHz / 9600
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <UART1_MANAGER_Initialize+0x58>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4c0e      	ldr	r4, [pc, #56]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006d4:	2296      	movs	r2, #150	; 0x96
 80006d6:	0191      	lsls	r1, r2, #6
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fd1d 	bl	8000118 <__udivsi3>
 80006de:	0003      	movs	r3, r0
 80006e0:	60e3      	str	r3, [r4, #12]
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_FIFOEN | USART_CR1_RXNEIE_RXFNEIE; // Enable TX / RX  / FIFO / Interrupt RX
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006e8:	490a      	ldr	r1, [pc, #40]	; (8000714 <UART1_MANAGER_Initialize+0x5c>)
 80006ea:	430a      	orrs	r2, r1
 80006ec:	601a      	str	r2, [r3, #0]

	asm("nop");
 80006ee:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80006f0:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80006f2:	46c0      	nop			; (mov r8, r8)

	USART1->CR1 |= USART_CR1_UE ; // Enable UART1
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <UART1_MANAGER_Initialize+0x54>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	430a      	orrs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]

	asm("nop");
 8000700:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 8000702:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 8000704:	46c0      	nop			; (mov r8, r8)
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bdb0      	pop	{r4, r5, r7, pc}
 800070c:	40013800 	.word	0x40013800
 8000710:	20000014 	.word	0x20000014
 8000714:	2000002c 	.word	0x2000002c

08000718 <delay_ms>:
#include "delay.h"

volatile uint16_t ms_counter = 0;

void delay_ms(uint16_t ms)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	0002      	movs	r2, r0
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	801a      	strh	r2, [r3, #0]
        ms_counter = ms;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <delay_ms+0x2c>)
 8000726:	1dba      	adds	r2, r7, #6
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	801a      	strh	r2, [r3, #0]
        while (ms_counter != 0) ;
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <delay_ms+0x2c>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1fa      	bne.n	800072e <delay_ms+0x16>

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000034 	.word	0x20000034

08000748 <SetMode>:
	.CRYPT_L = 0x00 ,
};



void SetMode(uint8_t mode){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	0002      	movs	r2, r0
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	701a      	strb	r2, [r3, #0]
	while(AUX_Test() == 0);
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	4b34      	ldr	r3, [pc, #208]	; (8000828 <SetMode+0xe0>)
 8000758:	691a      	ldr	r2, [r3, #16]
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4013      	ands	r3, r2
 8000760:	d0f9      	beq.n	8000756 <SetMode+0xe>
	delay_ms(2);
 8000762:	2002      	movs	r0, #2
 8000764:	f7ff ffd8 	bl	8000718 <delay_ms>
	switch(mode)
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d03b      	beq.n	80007e8 <SetMode+0xa0>
 8000770:	dc4b      	bgt.n	800080a <SetMode+0xc2>
 8000772:	2b02      	cmp	r3, #2
 8000774:	d027      	beq.n	80007c6 <SetMode+0x7e>
 8000776:	dc48      	bgt.n	800080a <SetMode+0xc2>
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SetMode+0x3a>
 800077c:	2b01      	cmp	r3, #1
 800077e:	d011      	beq.n	80007a4 <SetMode+0x5c>
 8000780:	e043      	b.n	800080a <SetMode+0xc2>
	{
					case MODE_0_NORMAL:
						M0_SetLow();
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	699a      	ldr	r2, [r3, #24]
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0489      	lsls	r1, r1, #18
 8000790:	430a      	orrs	r2, r1
 8000792:	619a      	str	r2, [r3, #24]
						M1_SetLow();
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <SetMode+0xe0>)
 8000796:	699a      	ldr	r2, [r3, #24]
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <SetMode+0xe0>)
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	0489      	lsls	r1, r1, #18
 800079e:	430a      	orrs	r2, r1
 80007a0:	619a      	str	r2, [r3, #24]
						break;
 80007a2:	e032      	b.n	800080a <SetMode+0xc2>
					case MODE_1_WOR_Transmiter:
						M0_SetHigh();
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0089      	lsls	r1, r1, #2
 80007b2:	430a      	orrs	r2, r1
 80007b4:	619a      	str	r2, [r3, #24]
						M1_SetLow();
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <SetMode+0xe0>)
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <SetMode+0xe0>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0489      	lsls	r1, r1, #18
 80007c0:	430a      	orrs	r2, r1
 80007c2:	619a      	str	r2, [r3, #24]
						break;
 80007c4:	e021      	b.n	800080a <SetMode+0xc2>
					case MODE_2_WOR_Receiver:
						M0_SetLow();
 80007c6:	23a0      	movs	r3, #160	; 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	699a      	ldr	r2, [r3, #24]
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0489      	lsls	r1, r1, #18
 80007d4:	430a      	orrs	r2, r1
 80007d6:	619a      	str	r2, [r3, #24]
						M1_SetHigh();
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <SetMode+0xe0>)
 80007da:	699a      	ldr	r2, [r3, #24]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <SetMode+0xe0>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0089      	lsls	r1, r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	619a      	str	r2, [r3, #24]
						break;
 80007e6:	e010      	b.n	800080a <SetMode+0xc2>
					case MODE_3_SLEEP_CONFIG:
						M0_SetHigh();
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	699a      	ldr	r2, [r3, #24]
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	0089      	lsls	r1, r1, #2
 80007f6:	430a      	orrs	r2, r1
 80007f8:	619a      	str	r2, [r3, #24]
						M1_SetHigh();
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <SetMode+0xe0>)
 80007fc:	699a      	ldr	r2, [r3, #24]
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <SetMode+0xe0>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0089      	lsls	r1, r1, #2
 8000804:	430a      	orrs	r2, r1
 8000806:	619a      	str	r2, [r3, #24]
						break;
 8000808:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff84 	bl	8000718 <delay_ms>
	while(AUX_Test() == 0);
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SetMode+0xe0>)
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4013      	ands	r3, r2
 800081c:	d0f9      	beq.n	8000812 <SetMode+0xca>
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	50000400 	.word	0x50000400

0800082c <LoraModuleInit>:


void LoraModuleInit(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

//	SetMode(MODE_3_SLEEP_CONFIG);
	/*** Send frame to module Lora register ***/
	usart1_sendByte(Write_Register);
 8000830:	20c0      	movs	r0, #192	; 0xc0
 8000832:	f000 fa71 	bl	8000d18 <usart1_sendByte>
	usart1_sendByte(REG_ADDRESS_ADDH); //start register adress
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fa6e 	bl	8000d18 <usart1_sendByte>
	usart1_sendByte(sizeof(configurationLoraRegister));
 800083c:	2008      	movs	r0, #8
 800083e:	f000 fa6b 	bl	8000d18 <usart1_sendByte>
	usart1_sendStructure(&configurationLoraRegister, sizeof(configurationLoraRegister));
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <LoraModuleInit+0x28>)
 8000844:	2108      	movs	r1, #8
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fa7c 	bl	8000d44 <usart1_sendStructure>

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000000 	.word	0x20000000

08000858 <__NVIC_SetPriority>:
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b7f      	cmp	r3, #127	; 0x7f
 800086c:	d828      	bhi.n	80008c0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <__NVIC_SetPriority+0xd4>)
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b25b      	sxtb	r3, r3
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	33c0      	adds	r3, #192	; 0xc0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	589b      	ldr	r3, [r3, r2]
 800087e:	1dfa      	adds	r2, r7, #7
 8000880:	7812      	ldrb	r2, [r2, #0]
 8000882:	0011      	movs	r1, r2
 8000884:	2203      	movs	r2, #3
 8000886:	400a      	ands	r2, r1
 8000888:	00d2      	lsls	r2, r2, #3
 800088a:	21ff      	movs	r1, #255	; 0xff
 800088c:	4091      	lsls	r1, r2
 800088e:	000a      	movs	r2, r1
 8000890:	43d2      	mvns	r2, r2
 8000892:	401a      	ands	r2, r3
 8000894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	401a      	ands	r2, r3
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	0018      	movs	r0, r3
 80008a4:	2303      	movs	r3, #3
 80008a6:	4003      	ands	r3, r0
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ac:	481f      	ldr	r0, [pc, #124]	; (800092c <__NVIC_SetPriority+0xd4>)
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	089b      	lsrs	r3, r3, #2
 80008b6:	430a      	orrs	r2, r1
 80008b8:	33c0      	adds	r3, #192	; 0xc0
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	501a      	str	r2, [r3, r0]
}
 80008be:	e031      	b.n	8000924 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <__NVIC_SetPriority+0xd8>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0019      	movs	r1, r3
 80008c8:	230f      	movs	r3, #15
 80008ca:	400b      	ands	r3, r1
 80008cc:	3b08      	subs	r3, #8
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3306      	adds	r3, #6
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	3304      	adds	r3, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1dfa      	adds	r2, r7, #7
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	0011      	movs	r1, r2
 80008e0:	2203      	movs	r2, #3
 80008e2:	400a      	ands	r2, r1
 80008e4:	00d2      	lsls	r2, r2, #3
 80008e6:	21ff      	movs	r1, #255	; 0xff
 80008e8:	4091      	lsls	r1, r2
 80008ea:	000a      	movs	r2, r1
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	401a      	ands	r2, r3
 80008f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	019b      	lsls	r3, r3, #6
 80008f6:	22ff      	movs	r2, #255	; 0xff
 80008f8:	401a      	ands	r2, r3
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	2303      	movs	r3, #3
 8000902:	4003      	ands	r3, r0
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <__NVIC_SetPriority+0xd8>)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	001c      	movs	r4, r3
 8000910:	230f      	movs	r3, #15
 8000912:	4023      	ands	r3, r4
 8000914:	3b08      	subs	r3, #8
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	430a      	orrs	r2, r1
 800091a:	3306      	adds	r3, #6
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	18c3      	adds	r3, r0, r3
 8000920:	3304      	adds	r3, #4
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b003      	add	sp, #12
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	1e5a      	subs	r2, r3, #1
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	045b      	lsls	r3, r3, #17
 8000944:	429a      	cmp	r2, r3
 8000946:	d301      	bcc.n	800094c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000948:	2301      	movs	r3, #1
 800094a:	e010      	b.n	800096e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <SysTick_Config+0x44>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	3a01      	subs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000954:	2301      	movs	r3, #1
 8000956:	425b      	negs	r3, r3
 8000958:	2103      	movs	r1, #3
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff ff7c 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SysTick_Config+0x44>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SysTick_Config+0x44>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	e000e010 	.word	0xe000e010

0800097c <main>:
#include "lora.h"
#include "ringbuffer.h"

volatile uint16_t ms_timer1 = 100 ;

int main (void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	SystemInit();
 8000980:	f000 f940 	bl	8000c04 <SystemInit>
	SystemCoreClockUpdate();
 8000984:	f000 f944 	bl	8000c10 <SystemCoreClockUpdate>
	SYSTEM_MANAGER_Initialize(); // my hardware initialization
 8000988:	f7ff fe88 	bl	800069c <SYSTEM_MANAGER_Initialize>
	SysTick_Config((SystemCoreClock/1000)-1); // Systick 1 ms
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <main+0x94>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	22fa      	movs	r2, #250	; 0xfa
 8000992:	0091      	lsls	r1, r2, #2
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff fbbf 	bl	8000118 <__udivsi3>
 800099a:	0003      	movs	r3, r0
 800099c:	3b01      	subs	r3, #1
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff ffc8 	bl	8000934 <SysTick_Config>

	delay_ms(40); // must be a delay for first init LORA
 80009a4:	2028      	movs	r0, #40	; 0x28
 80009a6:	f7ff feb7 	bl	8000718 <delay_ms>
	LoraModuleInit();
 80009aa:	f7ff ff3f 	bl	800082c <LoraModuleInit>
	SetMode(MODE_0_NORMAL);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff feca 	bl	8000748 <SetMode>

	while(1){

				if(!ms_timer1){
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <main+0x98>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11a      	bne.n	80009f4 <main+0x78>
//						usart1_sendByte(0x00); // target channel number
//						usart1_sendString("messageToSendLora\r");// send message to other module Lora
//					};

//					LED2_Toggle()  ;
					LED1_Toggle()  ;
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	4013      	ands	r3, r2
 80009c8:	d009      	beq.n	80009de <main+0x62>
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	699a      	ldr	r2, [r3, #24]
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	03c9      	lsls	r1, r1, #15
 80009d8:	430a      	orrs	r2, r1
 80009da:	619a      	str	r2, [r3, #24]
 80009dc:	e007      	b.n	80009ee <main+0x72>
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	699a      	ldr	r2, [r3, #24]
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	430a      	orrs	r2, r1
 80009ec:	619a      	str	r2, [r3, #24]
					ms_timer1 = 200; //for 200 ms
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <main+0x98>)
 80009f0:	22c8      	movs	r2, #200	; 0xc8
 80009f2:	801a      	strh	r2, [r3, #0]
				}
					if(uartRxStringEvent()) LED_SetHigh() ;
 80009f4:	f000 f8ee 	bl	8000bd4 <uartRxStringEvent>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d0db      	beq.n	80009b4 <main+0x38>
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	23a0      	movs	r3, #160	; 0xa0
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	0049      	lsls	r1, r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	619a      	str	r2, [r3, #24]
				if(!ms_timer1){
 8000a0e:	e7d1      	b.n	80009b4 <main+0x38>
 8000a10:	20000014 	.word	0x20000014
 8000a14:	20000008 	.word	0x20000008

08000a18 <SysTick_Handler>:
			}
		}


void SysTick_Handler(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	uint16_t n;

	/*** milisecond Counter ***/
	 n = ms_counter ;
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <SysTick_Handler+0x54>)
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	801a      	strh	r2, [r3, #0]
	 if(n) ms_counter = --n;
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d008      	beq.n	8000a40 <SysTick_Handler+0x28>
 8000a2e:	1dbb      	adds	r3, r7, #6
 8000a30:	1dba      	adds	r2, r7, #6
 8000a32:	8812      	ldrh	r2, [r2, #0]
 8000a34:	3a01      	subs	r2, #1
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <SysTick_Handler+0x54>)
 8000a3a:	1dba      	adds	r2, r7, #6
 8000a3c:	8812      	ldrh	r2, [r2, #0]
 8000a3e:	801a      	strh	r2, [r3, #0]
	/*** milisecond Timer1 ***/
	 n = ms_timer1;
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <SysTick_Handler+0x58>)
 8000a44:	8812      	ldrh	r2, [r2, #0]
 8000a46:	801a      	strh	r2, [r3, #0]
	 if (n) ms_timer1 = --n;
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <SysTick_Handler+0x4a>
 8000a50:	1dbb      	adds	r3, r7, #6
 8000a52:	1dba      	adds	r2, r7, #6
 8000a54:	8812      	ldrh	r2, [r2, #0]
 8000a56:	3a01      	subs	r2, #1
 8000a58:	801a      	strh	r2, [r3, #0]
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Handler+0x58>)
 8000a5c:	1dba      	adds	r2, r7, #6
 8000a5e:	8812      	ldrh	r2, [r2, #0]
 8000a60:	801a      	strh	r2, [r3, #0]

	 }
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000034 	.word	0x20000034
 8000a70:	20000008 	.word	0x20000008

08000a74 <USART1_IRQHandler>:





void USART1_IRQHandler(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0


	/*** Odbiór danych **/
	if (USART1->ISR & USART_ISR_RXNE_RXFNE){// RX register not empty ?
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <USART1_IRQHandler+0x98>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	2220      	movs	r2, #32
 8000a80:	4013      	ands	r3, r2
 8000a82:	d03a      	beq.n	8000afa <USART1_IRQHandler+0x86>

		char dataRx ;
		dataRx = (uint8_t)(USART1->RDR);// odczyt rejestru RDR kasuje flagę RXFNE;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <USART1_IRQHandler+0x98>)
 8000a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	701a      	strb	r2, [r3, #0]

		uint8_t head_temp = (uart_rx_ringBuff.head + 1) % UART_RX_BUF_SIZE;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <USART1_IRQHandler+0x9c>)
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	2160      	movs	r1, #96	; 0x60
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff fcae 	bl	80003f8 <__aeabi_idivmod>
 8000a9c:	000b      	movs	r3, r1
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	701a      	strb	r2, [r3, #0]

				/* Sprawdzamy czy jest miejsce w buforze */
		if ( head_temp == uart_rx_ringBuff.tail ) {
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <USART1_IRQHandler+0x9c>)
 8000aa6:	795b      	ldrb	r3, [r3, #5]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	1dba      	adds	r2, r7, #6
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d105      	bne.n	8000abe <USART1_IRQHandler+0x4a>
				/* Jeśli bufor jest pełny to możemy tu jakoś na to zareagować
				 W procedurze obsługi przerwania nie można czekać na zwolnienie miejsca! */
				uart_rx_ringBuff.head = uart_rx_ringBuff.tail ;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <USART1_IRQHandler+0x9c>)
 8000ab4:	795b      	ldrb	r3, [r3, #5]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <USART1_IRQHandler+0x9c>)
 8000aba:	711a      	strb	r2, [r3, #4]

				}

			}

}
 8000abc:	e022      	b.n	8000b04 <USART1_IRQHandler+0x90>
					switch (dataRx) {
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b0d      	cmp	r3, #13
 8000ac4:	d005      	beq.n	8000ad2 <USART1_IRQHandler+0x5e>
 8000ac6:	dc0b      	bgt.n	8000ae0 <USART1_IRQHandler+0x6c>
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d018      	beq.n	8000afe <USART1_IRQHandler+0x8a>
 8000acc:	2b0a      	cmp	r3, #10
 8000ace:	d018      	beq.n	8000b02 <USART1_IRQHandler+0x8e>
 8000ad0:	e006      	b.n	8000ae0 <USART1_IRQHandler+0x6c>
						case ASCII_CR : endLine++ ;  // sygnalizujemy obecność znaku enter czyli kolejnej linii w buforze - DEC - 13 / CR
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <USART1_IRQHandler+0xa0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <USART1_IRQHandler+0xa0>)
 8000ade:	701a      	strb	r2, [r3, #0]
						default : uart_rx_ringBuff.buffer[head_temp] = dataRx ;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <USART1_IRQHandler+0x9c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	1dbb      	adds	r3, r7, #6
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	1dfa      	adds	r2, r7, #7
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	701a      	strb	r2, [r3, #0]
						          uart_rx_ringBuff.head = head_temp;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <USART1_IRQHandler+0x9c>)
 8000af2:	1dba      	adds	r2, r7, #6
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	711a      	strb	r2, [r3, #4]
}
 8000af8:	e004      	b.n	8000b04 <USART1_IRQHandler+0x90>
				}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	e002      	b.n	8000b04 <USART1_IRQHandler+0x90>
						case ASCII_NUL: break ; //ignorujemy znak NUL
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	e000      	b.n	8000b04 <USART1_IRQHandler+0x90>
						case ASCII_LF: break ; //ignorujemy znak LF
 8000b02:	46c0      	nop			; (mov r8, r8)
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	200000b8 	.word	0x200000b8

08000b18 <ringBufferGetChar>:
volatile char uart_rxBuff[UART_RX_BUF_SIZE];
char parseBuff[PARSE_BUF_SIZE] ;
volatile uint8_t endLine = 0 ; //counts CR characters (Enter) /r
volatile ringBuffer_t uart_rx_ringBuff = { uart_rxBuff, 0, 0 };

int8_t ringBufferGetChar(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if(uart_rx_ringBuff.head == uart_rx_ringBuff.tail) return -1 ; //buffer full return -1, use this in the function that retrieves the string
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <ringBufferGetChar+0x48>)
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <ringBufferGetChar+0x48>)
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d102      	bne.n	8000b32 <ringBufferGetChar+0x1a>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	e013      	b.n	8000b5a <ringBufferGetChar+0x42>
	uart_rx_ringBuff.tail = (uart_rx_ringBuff.tail + 1) % UART_RX_BUF_SIZE; //calculate a new index for tail
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <ringBufferGetChar+0x48>)
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	2160      	movs	r1, #96	; 0x60
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fc5b 	bl	80003f8 <__aeabi_idivmod>
 8000b42:	000b      	movs	r3, r1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <ringBufferGetChar+0x48>)
 8000b48:	715a      	strb	r2, [r3, #5]
	return uart_rxBuff[uart_rx_ringBuff.tail] ; //return the byte retrieved from the ringBuffer
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ringBufferGetChar+0x48>)
 8000b4c:	795b      	ldrb	r3, [r3, #5]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	001a      	movs	r2, r3
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <ringBufferGetChar+0x4c>)
 8000b54:	5c9b      	ldrb	r3, [r3, r2]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	b25b      	sxtb	r3, r3
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	20000038 	.word	0x20000038

08000b68 <ringBufferGetString>:

char* ringBufferGetString(char *buf){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	char znak ;
	char *wsk = buf ;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60fb      	str	r3, [r7, #12]

	if(endLine){ // end-of-line character in the buffer - CR (Enter) \r ?
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <ringBufferGetString+0x68>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d022      	beq.n	8000bc4 <ringBufferGetString+0x5c>
		while((znak = ringBufferGetChar())) {
 8000b7e:	e00a      	b.n	8000b96 <ringBufferGetString+0x2e>
			if(ASCII_CR == znak || znak < 0) break ;
 8000b80:	210b      	movs	r1, #11
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b0d      	cmp	r3, #13
 8000b88:	d011      	beq.n	8000bae <ringBufferGetString+0x46>
		*buf++ = znak ;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	187a      	adds	r2, r7, r1
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	701a      	strb	r2, [r3, #0]
		while((znak = ringBufferGetChar())) {
 8000b96:	f7ff ffbf 	bl	8000b18 <ringBufferGetChar>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	210b      	movs	r1, #11
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1e9      	bne.n	8000b80 <ringBufferGetString+0x18>
 8000bac:	e000      	b.n	8000bb0 <ringBufferGetString+0x48>
			if(ASCII_CR == znak || znak < 0) break ;
 8000bae:	46c0      	nop			; (mov r8, r8)
	}
	*buf = 0;  // conversion of CR (Enter) character to 0
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	endLine-- ;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <ringBufferGetString+0x68>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <ringBufferGetString+0x68>)
 8000bc2:	701a      	strb	r2, [r3, #0]
}

	 return wsk ;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	200000b8 	.word	0x200000b8

08000bd4 <uartRxStringEvent>:

uint8_t uartRxStringEvent(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

	if(strcmp(ringBufferGetString(parseBuff) , "messageToSendLora") == 0) return 1 ;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <uartRxStringEvent+0x28>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff ffc4 	bl	8000b68 <ringBufferGetString>
 8000be0:	0002      	movs	r2, r0
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <uartRxStringEvent+0x2c>)
 8000be4:	0019      	movs	r1, r3
 8000be6:	0010      	movs	r0, r2
 8000be8:	f7ff fa8c 	bl	8000104 <strcmp>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d101      	bne.n	8000bf4 <uartRxStringEvent+0x20>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <uartRxStringEvent+0x22>
	else return 0 ;
 8000bf4:	2300      	movs	r3, #0

	}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000098 	.word	0x20000098
 8000c00:	08000e30 	.word	0x08000e30

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2238      	movs	r2, #56	; 0x38
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b20      	cmp	r3, #32
 8000c20:	d011      	beq.n	8000c46 <SystemCoreClockUpdate+0x36>
 8000c22:	d849      	bhi.n	8000cb8 <SystemCoreClockUpdate+0xa8>
 8000c24:	2b18      	cmp	r3, #24
 8000c26:	d009      	beq.n	8000c3c <SystemCoreClockUpdate+0x2c>
 8000c28:	d846      	bhi.n	8000cb8 <SystemCoreClockUpdate+0xa8>
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d002      	beq.n	8000c34 <SystemCoreClockUpdate+0x24>
 8000c2e:	2b10      	cmp	r3, #16
 8000c30:	d00e      	beq.n	8000c50 <SystemCoreClockUpdate+0x40>
 8000c32:	e041      	b.n	8000cb8 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000c34:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000c36:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <SystemCoreClockUpdate+0xfc>)
 8000c38:	601a      	str	r2, [r3, #0]
      break;
 8000c3a:	e04f      	b.n	8000cdc <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 8000c3c:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000c3e:	22fa      	movs	r2, #250	; 0xfa
 8000c40:	01d2      	lsls	r2, r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
      break;
 8000c44:	e04a      	b.n	8000cdc <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0212      	lsls	r2, r2, #8
 8000c4c:	601a      	str	r2, [r3, #0]
      break;
 8000c4e:	e045      	b.n	8000cdc <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	2207      	movs	r2, #7
 8000c62:	4013      	ands	r3, r2
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d106      	bne.n	8000c7c <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	4826      	ldr	r0, [pc, #152]	; (8000d0c <SystemCoreClockUpdate+0xfc>)
 8000c72:	f7ff fa51 	bl	8000118 <__udivsi3>
 8000c76:	0003      	movs	r3, r0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e005      	b.n	8000c88 <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000c7c:	68f9      	ldr	r1, [r7, #12]
 8000c7e:	4824      	ldr	r0, [pc, #144]	; (8000d10 <SystemCoreClockUpdate+0x100>)
 8000c80:	f7ff fa4a 	bl	8000118 <__udivsi3>
 8000c84:	0003      	movs	r3, r0
 8000c86:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	227f      	movs	r2, #127	; 0x7f
 8000c90:	401a      	ands	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	4353      	muls	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0f5b      	lsrs	r3, r3, #29
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f7ff fa35 	bl	8000118 <__udivsi3>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000cb4:	601a      	str	r2, [r3, #0]
      break;
 8000cb6:	e011      	b.n	8000cdc <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0adb      	lsrs	r3, r3, #11
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <SystemCoreClockUpdate+0x100>)
 8000cce:	f7ff fa23 	bl	8000118 <__udivsi3>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000cd8:	601a      	str	r2, [r3, #0]
      break;
 8000cda:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <SystemCoreClockUpdate+0xf4>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <SystemCoreClockUpdate+0x104>)
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	58d3      	ldr	r3, [r2, r3]
 8000cec:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	40da      	lsrs	r2, r3
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SystemCoreClockUpdate+0xf8>)
 8000cf8:	601a      	str	r2, [r3, #0]
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000
 8000d08:	20000014 	.word	0x20000014
 8000d0c:	007a1200 	.word	0x007a1200
 8000d10:	00f42400 	.word	0x00f42400
 8000d14:	08000e44 	.word	0x08000e44

08000d18 <usart1_sendByte>:
#include <stm32g071xx.h>
#include "uart.h"


void usart1_sendByte(uint8_t byte)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
	while ((USART1->ISR & USART_ISR_TXE_TXFNF) == 0); // TXFIFO not full
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <usart1_sendByte+0x28>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d0fa      	beq.n	8000d26 <usart1_sendByte+0xe>
	                USART1->TDR = byte;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <usart1_sendByte+0x28>)
 8000d32:	1dfa      	adds	r2, r7, #7
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013800 	.word	0x40013800

08000d44 <usart1_sendStructure>:
                usart1_sendByte(*string++);
        }
}
/*** For send configuration structure ***/
void usart1_sendStructure(const void *structure, uint8_t lengthStructure)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	000a      	movs	r2, r1
 8000d4e:	1cfb      	adds	r3, r7, #3
 8000d50:	701a      	strb	r2, [r3, #0]
        while (lengthStructure--) {
 8000d52:	e006      	b.n	8000d62 <usart1_sendStructure+0x1e>

        	usart1_sendByte(*(uint8_t*)structure++);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ffdb 	bl	8000d18 <usart1_sendByte>
        while (lengthStructure--) {
 8000d62:	1cfb      	adds	r3, r7, #3
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	1cfa      	adds	r2, r7, #3
 8000d68:	1e59      	subs	r1, r3, #1
 8000d6a:	7011      	strb	r1, [r2, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f1      	bne.n	8000d54 <usart1_sendStructure+0x10>

        }
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d80:	f7ff ff40 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000daa:	f000 f811 	bl	8000dd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dae:	f7ff fde5 	bl	800097c <main>

08000db2 <LoopForever>:

LoopForever:
  b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   r0, =_estack
 8000db4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dc0:	08000e8c 	.word	0x08000e8c
  ldr r2, =_sbss
 8000dc4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dc8:	200000bc 	.word	0x200000bc

08000dcc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_COMP_IRQHandler>
	...

08000dd0 <__libc_init_array>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4d0c      	ldr	r5, [pc, #48]	; (8000e08 <__libc_init_array+0x38>)
 8000dd6:	4c0d      	ldr	r4, [pc, #52]	; (8000e0c <__libc_init_array+0x3c>)
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	10a4      	asrs	r4, r4, #2
 8000ddc:	42a6      	cmp	r6, r4
 8000dde:	d109      	bne.n	8000df4 <__libc_init_array+0x24>
 8000de0:	2600      	movs	r6, #0
 8000de2:	f000 f819 	bl	8000e18 <_init>
 8000de6:	4d0a      	ldr	r5, [pc, #40]	; (8000e10 <__libc_init_array+0x40>)
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <__libc_init_array+0x44>)
 8000dea:	1b64      	subs	r4, r4, r5
 8000dec:	10a4      	asrs	r4, r4, #2
 8000dee:	42a6      	cmp	r6, r4
 8000df0:	d105      	bne.n	8000dfe <__libc_init_array+0x2e>
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
 8000df4:	00b3      	lsls	r3, r6, #2
 8000df6:	58eb      	ldr	r3, [r5, r3]
 8000df8:	4798      	blx	r3
 8000dfa:	3601      	adds	r6, #1
 8000dfc:	e7ee      	b.n	8000ddc <__libc_init_array+0xc>
 8000dfe:	00b3      	lsls	r3, r6, #2
 8000e00:	58eb      	ldr	r3, [r5, r3]
 8000e02:	4798      	blx	r3
 8000e04:	3601      	adds	r6, #1
 8000e06:	e7f2      	b.n	8000dee <__libc_init_array+0x1e>
 8000e08:	08000e84 	.word	0x08000e84
 8000e0c:	08000e84 	.word	0x08000e84
 8000e10:	08000e84 	.word	0x08000e84
 8000e14:	08000e88 	.word	0x08000e88

08000e18 <_init>:
 8000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1e:	bc08      	pop	{r3}
 8000e20:	469e      	mov	lr, r3
 8000e22:	4770      	bx	lr

08000e24 <_fini>:
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2a:	bc08      	pop	{r3}
 8000e2c:	469e      	mov	lr, r3
 8000e2e:	4770      	bx	lr
