
STM32G0_LORA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a38  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000af4  08000af4  00010af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b48  08000b48  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000b48  08000b48  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b48  08000b48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b48  08000b48  00010b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08000b60  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000b60  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a6e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b6  00000000  00000000  00021aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00022460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00022610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f55c  00000000  00000000  00022718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032ad  00000000  00000000  00031c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054116  00000000  00000000  00034f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00089037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000330  00000000  00000000  00089088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000adc 	.word	0x08000adc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08000adc 	.word	0x08000adc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <CLOCK_MANAGER_Initialize>:
******************************************/

#include <stm32g071xx.h>
#include "clock_config.h"

void CLOCK_MANAGER_Initialize(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

RCC->IOPENR |= RCC_IOPENR_GPIOAEN; 		//Open clock for GPIOA
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 8000222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 8000226:	2101      	movs	r1, #1
 8000228:	430a      	orrs	r2, r1
 800022a:	635a      	str	r2, [r3, #52]	; 0x34
RCC->IOPENR |= RCC_IOPENR_GPIOBEN; 		//Open clock for GPIOB
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 800022e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 8000232:	2102      	movs	r1, #2
 8000234:	430a      	orrs	r2, r1
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
RCC->IOPENR |= RCC_IOPENR_GPIOCEN; 		//Open clock for GPIOC
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 800023a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 800023e:	2104      	movs	r1, #4
 8000240:	430a      	orrs	r2, r1
 8000242:	635a      	str	r2, [r3, #52]	; 0x34
RCC->APBENR2 |= RCC_APBENR2_USART1EN; 	//Open clock for UART1
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 8000246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <CLOCK_MANAGER_Initialize+0x3c>)
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	01c9      	lsls	r1, r1, #7
 800024e:	430a      	orrs	r2, r1
 8000250:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40021000 	.word	0x40021000

0800025c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	0002      	movs	r2, r0
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b7f      	cmp	r3, #127	; 0x7f
 800026e:	d809      	bhi.n	8000284 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	001a      	movs	r2, r3
 8000276:	231f      	movs	r3, #31
 8000278:	401a      	ands	r2, r3
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <__NVIC_EnableIRQ+0x30>)
 800027c:	2101      	movs	r1, #1
 800027e:	4091      	lsls	r1, r2
 8000280:	000a      	movs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bd80      	pop	{r7, pc}
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b7f      	cmp	r3, #127	; 0x7f
 80002a4:	d828      	bhi.n	80002f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a6:	4a2f      	ldr	r2, [pc, #188]	; (8000364 <__NVIC_SetPriority+0xd4>)
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b25b      	sxtb	r3, r3
 80002ae:	089b      	lsrs	r3, r3, #2
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	589b      	ldr	r3, [r3, r2]
 80002b6:	1dfa      	adds	r2, r7, #7
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	0011      	movs	r1, r2
 80002bc:	2203      	movs	r2, #3
 80002be:	400a      	ands	r2, r1
 80002c0:	00d2      	lsls	r2, r2, #3
 80002c2:	21ff      	movs	r1, #255	; 0xff
 80002c4:	4091      	lsls	r1, r2
 80002c6:	000a      	movs	r2, r1
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	401a      	ands	r2, r3
 80002cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	019b      	lsls	r3, r3, #6
 80002d2:	22ff      	movs	r2, #255	; 0xff
 80002d4:	401a      	ands	r2, r3
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	0018      	movs	r0, r3
 80002dc:	2303      	movs	r3, #3
 80002de:	4003      	ands	r3, r0
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e4:	481f      	ldr	r0, [pc, #124]	; (8000364 <__NVIC_SetPriority+0xd4>)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	089b      	lsrs	r3, r3, #2
 80002ee:	430a      	orrs	r2, r1
 80002f0:	33c0      	adds	r3, #192	; 0xc0
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002f6:	e031      	b.n	800035c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f8:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <__NVIC_SetPriority+0xd8>)
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	0019      	movs	r1, r3
 8000300:	230f      	movs	r3, #15
 8000302:	400b      	ands	r3, r1
 8000304:	3b08      	subs	r3, #8
 8000306:	089b      	lsrs	r3, r3, #2
 8000308:	3306      	adds	r3, #6
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	18d3      	adds	r3, r2, r3
 800030e:	3304      	adds	r3, #4
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1dfa      	adds	r2, r7, #7
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	0011      	movs	r1, r2
 8000318:	2203      	movs	r2, #3
 800031a:	400a      	ands	r2, r1
 800031c:	00d2      	lsls	r2, r2, #3
 800031e:	21ff      	movs	r1, #255	; 0xff
 8000320:	4091      	lsls	r1, r2
 8000322:	000a      	movs	r2, r1
 8000324:	43d2      	mvns	r2, r2
 8000326:	401a      	ands	r2, r3
 8000328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	019b      	lsls	r3, r3, #6
 800032e:	22ff      	movs	r2, #255	; 0xff
 8000330:	401a      	ands	r2, r3
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	0018      	movs	r0, r3
 8000338:	2303      	movs	r3, #3
 800033a:	4003      	ands	r3, r0
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <__NVIC_SetPriority+0xd8>)
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	001c      	movs	r4, r3
 8000348:	230f      	movs	r3, #15
 800034a:	4023      	ands	r3, r4
 800034c:	3b08      	subs	r3, #8
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	430a      	orrs	r2, r1
 8000352:	3306      	adds	r3, #6
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	18c3      	adds	r3, r0, r3
 8000358:	3304      	adds	r3, #4
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b003      	add	sp, #12
 8000362:	bd90      	pop	{r4, r7, pc}
 8000364:	e000e100 	.word	0xe000e100
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <INTERRUPT_MANAGER_Initialize>:
******************************************/

#include <stm32g071xx.h>
#include "interrupt_config.h"

void INTERRUPT_MANAGER_Initialize(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
/* UART1 interrupt init*/
 NVIC_SetPriority(USART1_IRQn, 2);
 8000370:	2102      	movs	r1, #2
 8000372:	201b      	movs	r0, #27
 8000374:	f7ff ff8c 	bl	8000290 <__NVIC_SetPriority>
 NVIC_EnableIRQ(USART1_IRQn);
 8000378:	201b      	movs	r0, #27
 800037a:	f7ff ff6f 	bl	800025c <__NVIC_EnableIRQ>
 
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <PIN_MANAGER_Initialize>:
******************************************/

#include <stm32g071xx.h>
#include "pin_config.h"

void PIN_MANAGER_Initialize(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
/*** set OUT fuction mode (0b01)***/
/*  PA2 set Out for LED2 LORA module*/
GPIOA->MODER &= ~GPIO_MODER_MODE2_1;
 8000388:	23a0      	movs	r3, #160	; 0xa0
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	23a0      	movs	r3, #160	; 0xa0
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2120      	movs	r1, #32
 8000394:	438a      	bics	r2, r1
 8000396:	601a      	str	r2, [r3, #0]
/* PA6 set Out for LED1 LORA module */
GPIOA->MODER &= ~GPIO_MODER_MODE6_1;
 8000398:	23a0      	movs	r3, #160	; 0xa0
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	23a0      	movs	r3, #160	; 0xa0
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	493b      	ldr	r1, [pc, #236]	; (8000490 <PIN_MANAGER_Initialize+0x10c>)
 80003a4:	400a      	ands	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
/* PA9 set Out for M0 LORA module */
GPIOA->MODER &= ~GPIO_MODER_MODE9_1;
 80003a8:	23a0      	movs	r3, #160	; 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	23a0      	movs	r3, #160	; 0xa0
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	4938      	ldr	r1, [pc, #224]	; (8000494 <PIN_MANAGER_Initialize+0x110>)
 80003b4:	400a      	ands	r2, r1
 80003b6:	601a      	str	r2, [r3, #0]
/* PB9 set Out for M1 LORA module */
GPIOB->MODER &= ~GPIO_MODER_MODE9_1;
 80003b8:	4b37      	ldr	r3, [pc, #220]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 80003be:	4935      	ldr	r1, [pc, #212]	; (8000494 <PIN_MANAGER_Initialize+0x110>)
 80003c0:	400a      	ands	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
/* PA8 set Out for LED MCU Board */
GPIOA->MODER &= ~GPIO_MODER_MODE8_1;
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	4933      	ldr	r1, [pc, #204]	; (800049c <PIN_MANAGER_Initialize+0x118>)
 80003d0:	400a      	ands	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
/* set M0 - PA9 and M1 - PB9 to HIGH - for MODE 3 LORA*/
GPIOA->BSRR |= GPIO_BSRR_BS9 ;
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	699a      	ldr	r2, [r3, #24]
 80003da:	23a0      	movs	r3, #160	; 0xa0
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2180      	movs	r1, #128	; 0x80
 80003e0:	0089      	lsls	r1, r1, #2
 80003e2:	430a      	orrs	r2, r1
 80003e4:	619a      	str	r2, [r3, #24]
GPIOB->BSRR |= GPIO_BSRR_BS9 ;
 80003e6:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	0089      	lsls	r1, r1, #2
 80003f0:	430a      	orrs	r2, r1
 80003f2:	619a      	str	r2, [r3, #24]
/*** set INPUT fuction mode (0b00)***/
/* PB8 set INPUT for AUX LORA module */
GPIOB->MODER &= ~(GPIO_MODER_MODE8_0 | GPIO_MODER_MODE8_1);
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 80003fa:	4929      	ldr	r1, [pc, #164]	; (80004a0 <PIN_MANAGER_Initialize+0x11c>)
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
/* set Pull-Up for PB8 (0b01) */
GPIOB->PUPDR |= GPIO_PUPDR_PUPD8_0 ;
 8000400:	4b25      	ldr	r3, [pc, #148]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 8000406:	2180      	movs	r1, #128	; 0x80
 8000408:	0249      	lsls	r1, r1, #9
 800040a:	430a      	orrs	r2, r1
 800040c:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD8_1;
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 8000410:	68da      	ldr	r2, [r3, #12]
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 8000414:	4921      	ldr	r1, [pc, #132]	; (800049c <PIN_MANAGER_Initialize+0x118>)
 8000416:	400a      	ands	r2, r1
 8000418:	60da      	str	r2, [r3, #12]

/*** set Alternate fuction mode (0b10) ***/
/* PB6 for TX UART1*/
GPIOB->MODER |= GPIO_MODER_MODE6_1 ;
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0189      	lsls	r1, r1, #6
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
GPIOB->MODER &= ~(GPIO_MODER_MODE6_0);
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <PIN_MANAGER_Initialize+0x114>)
 800042e:	491d      	ldr	r1, [pc, #116]	; (80004a4 <PIN_MANAGER_Initialize+0x120>)
 8000430:	400a      	ands	r2, r1
 8000432:	601a      	str	r2, [r3, #0]
/*PA10 for RX UART1*/
GPIOA->MODER |= GPIO_MODER_MODE10_1 ;
 8000434:	23a0      	movs	r3, #160	; 0xa0
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	0389      	lsls	r1, r1, #14
 8000442:	430a      	orrs	r2, r1
 8000444:	601a      	str	r2, [r3, #0]
GPIOA->MODER &= ~(GPIO_MODER_MODE10_0);
 8000446:	23a0      	movs	r3, #160	; 0xa0
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	4915      	ldr	r1, [pc, #84]	; (80004a8 <PIN_MANAGER_Initialize+0x124>)
 8000452:	400a      	ands	r2, r1
 8000454:	601a      	str	r2, [r3, #0]

/*** set for UART1 ***/
/* for PB6 (0b0000) */
GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL6) ; // clear
 8000456:	23a0      	movs	r3, #160	; 0xa0
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	6a1a      	ldr	r2, [r3, #32]
 800045c:	23a0      	movs	r3, #160	; 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	4912      	ldr	r1, [pc, #72]	; (80004ac <PIN_MANAGER_Initialize+0x128>)
 8000462:	400a      	ands	r2, r1
 8000464:	621a      	str	r2, [r3, #32]
/* for PA10  (0b0001) */
GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL10) ; // clear
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800046c:	23a0      	movs	r3, #160	; 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	490f      	ldr	r1, [pc, #60]	; (80004b0 <PIN_MANAGER_Initialize+0x12c>)
 8000472:	400a      	ands	r2, r1
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
GPIOA->AFR[1] |= GPIO_AFRH_AFSEL10_0 ; //set
 8000476:	23a0      	movs	r3, #160	; 0xa0
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0049      	lsls	r1, r1, #1
 8000484:	430a      	orrs	r2, r1
 8000486:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	ffffdfff 	.word	0xffffdfff
 8000494:	fff7ffff 	.word	0xfff7ffff
 8000498:	50000400 	.word	0x50000400
 800049c:	fffdffff 	.word	0xfffdffff
 80004a0:	fffcffff 	.word	0xfffcffff
 80004a4:	ffffefff 	.word	0xffffefff
 80004a8:	ffefffff 	.word	0xffefffff
 80004ac:	f0ffffff 	.word	0xf0ffffff
 80004b0:	fffff0ff 	.word	0xfffff0ff

080004b4 <SYSTEM_MANAGER_Initialize>:
#include "system_config.h"
#include "interrupt_config.h"
#include "uart_config.h"


void SYSTEM_MANAGER_Initialize(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

CLOCK_MANAGER_Initialize();
 80004b8:	f7ff feb0 	bl	800021c <CLOCK_MANAGER_Initialize>
PIN_MANAGER_Initialize();
 80004bc:	f7ff ff62 	bl	8000384 <PIN_MANAGER_Initialize>
UART1_MANAGER_Initialize();
 80004c0:	f000 f806 	bl	80004d0 <UART1_MANAGER_Initialize>
INTERRUPT_MANAGER_Initialize();
 80004c4:	f7ff ff52 	bl	800036c <INTERRUPT_MANAGER_Initialize>

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <UART1_MANAGER_Initialize>:

#include <stm32g071xx.h>
#include "uart_config.h"


void UART1_MANAGER_Initialize(void){
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	af00      	add	r7, sp, #0

	USART1->CR1 &= ~USART_CR1_UE ; // Disable UART1
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 80004da:	2101      	movs	r1, #1
 80004dc:	438a      	bics	r2, r1
 80004de:	601a      	str	r2, [r3, #0]

	asm("nop");
 80004e0:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80004e2:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80004e4:	46c0      	nop			; (mov r8, r8)

	USART1->BRR = SystemCoreClock / UART_SPEED; // set baud rate - 16MHz / 9600
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <UART1_MANAGER_Initialize+0x58>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4c0e      	ldr	r4, [pc, #56]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 80004ec:	2296      	movs	r2, #150	; 0x96
 80004ee:	0191      	lsls	r1, r2, #6
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff fe07 	bl	8000104 <__udivsi3>
 80004f6:	0003      	movs	r3, r0
 80004f8:	60e3      	str	r3, [r4, #12]
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_FIFOEN; // Enable TX / RX  / FIFO
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 8000500:	490a      	ldr	r1, [pc, #40]	; (800052c <UART1_MANAGER_Initialize+0x5c>)
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]

	asm("nop");
 8000506:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 8000508:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 800050a:	46c0      	nop			; (mov r8, r8)

	USART1->CR1 |= USART_CR1_UE ; // Enable UART1
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <UART1_MANAGER_Initialize+0x54>)
 8000512:	2101      	movs	r1, #1
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]

	asm("nop");
 8000518:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 800051a:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 800051c:	46c0      	nop			; (mov r8, r8)
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bdb0      	pop	{r4, r5, r7, pc}
 8000524:	40013800 	.word	0x40013800
 8000528:	2000000c 	.word	0x2000000c
 800052c:	2000000c 	.word	0x2000000c

08000530 <delay_ms>:
#include "delay.h"

volatile uint16_t ms_counter = 0;

void delay_ms(uint16_t ms)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	801a      	strh	r2, [r3, #0]
        ms_counter = ms;
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <delay_ms+0x2c>)
 800053e:	1dba      	adds	r2, r7, #6
 8000540:	8812      	ldrh	r2, [r2, #0]
 8000542:	801a      	strh	r2, [r3, #0]
        while (ms_counter != 0) ;
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <delay_ms+0x2c>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1fa      	bne.n	8000546 <delay_ms+0x16>

}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b002      	add	sp, #8
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	2000002c 	.word	0x2000002c

08000560 <SetMode>:
	.CRYPT_L = 0x00 ,
};



void SetMode(uint8_t mode){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	701a      	strb	r2, [r3, #0]
	while(AUX_Test() == 0);
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	4b34      	ldr	r3, [pc, #208]	; (8000640 <SetMode+0xe0>)
 8000570:	691a      	ldr	r2, [r3, #16]
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	4013      	ands	r3, r2
 8000578:	d0f9      	beq.n	800056e <SetMode+0xe>
	delay_ms(2);
 800057a:	2002      	movs	r0, #2
 800057c:	f7ff ffd8 	bl	8000530 <delay_ms>
	switch(mode)
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b03      	cmp	r3, #3
 8000586:	d03b      	beq.n	8000600 <SetMode+0xa0>
 8000588:	dc4b      	bgt.n	8000622 <SetMode+0xc2>
 800058a:	2b02      	cmp	r3, #2
 800058c:	d027      	beq.n	80005de <SetMode+0x7e>
 800058e:	dc48      	bgt.n	8000622 <SetMode+0xc2>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <SetMode+0x3a>
 8000594:	2b01      	cmp	r3, #1
 8000596:	d011      	beq.n	80005bc <SetMode+0x5c>
 8000598:	e043      	b.n	8000622 <SetMode+0xc2>
	{
					case MODE_0_NORMAL:
						M0_SetLow();
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	699a      	ldr	r2, [r3, #24]
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0489      	lsls	r1, r1, #18
 80005a8:	430a      	orrs	r2, r1
 80005aa:	619a      	str	r2, [r3, #24]
						M1_SetLow();
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <SetMode+0xe0>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SetMode+0xe0>)
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	0489      	lsls	r1, r1, #18
 80005b6:	430a      	orrs	r2, r1
 80005b8:	619a      	str	r2, [r3, #24]
						break;
 80005ba:	e032      	b.n	8000622 <SetMode+0xc2>
					case MODE_1_WOR_Transmiter:
						M0_SetHigh();
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0089      	lsls	r1, r1, #2
 80005ca:	430a      	orrs	r2, r1
 80005cc:	619a      	str	r2, [r3, #24]
						M1_SetLow();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SetMode+0xe0>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <SetMode+0xe0>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0489      	lsls	r1, r1, #18
 80005d8:	430a      	orrs	r2, r1
 80005da:	619a      	str	r2, [r3, #24]
						break;
 80005dc:	e021      	b.n	8000622 <SetMode+0xc2>
					case MODE_2_WOR_Receiver:
						M0_SetLow();
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	699a      	ldr	r2, [r3, #24]
 80005e4:	23a0      	movs	r3, #160	; 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0489      	lsls	r1, r1, #18
 80005ec:	430a      	orrs	r2, r1
 80005ee:	619a      	str	r2, [r3, #24]
						M1_SetHigh();
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <SetMode+0xe0>)
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <SetMode+0xe0>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0089      	lsls	r1, r1, #2
 80005fa:	430a      	orrs	r2, r1
 80005fc:	619a      	str	r2, [r3, #24]
						break;
 80005fe:	e010      	b.n	8000622 <SetMode+0xc2>
					case MODE_3_SLEEP_CONFIG:
						M0_SetHigh();
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0089      	lsls	r1, r1, #2
 800060e:	430a      	orrs	r2, r1
 8000610:	619a      	str	r2, [r3, #24]
						M1_SetHigh();
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <SetMode+0xe0>)
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <SetMode+0xe0>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0089      	lsls	r1, r1, #2
 800061c:	430a      	orrs	r2, r1
 800061e:	619a      	str	r2, [r3, #24]
						break;
 8000620:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff84 	bl	8000530 <delay_ms>
	while(AUX_Test() == 0);
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SetMode+0xe0>)
 800062c:	691a      	ldr	r2, [r3, #16]
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4013      	ands	r3, r2
 8000634:	d0f9      	beq.n	800062a <SetMode+0xca>
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	50000400 	.word	0x50000400

08000644 <LoraModuleInit>:


void LoraModuleInit(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

//	SetMode(MODE_3_SLEEP_CONFIG);
	/*** Send frame to module Lora register ***/
	usart1_sendByte(Write_Register);
 8000648:	20c0      	movs	r0, #192	; 0xc0
 800064a:	f000 f9b3 	bl	80009b4 <usart1_sendByte>
	usart1_sendByte(REG_ADDRESS_ADDH); //start register adress
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f9b0 	bl	80009b4 <usart1_sendByte>
	usart1_sendByte(sizeof(configurationLoraRegister));
 8000654:	2008      	movs	r0, #8
 8000656:	f000 f9ad 	bl	80009b4 <usart1_sendByte>
	usart1_sendStructure(&configurationLoraRegister, sizeof(configurationLoraRegister));
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <LoraModuleInit+0x28>)
 800065c:	2108      	movs	r1, #8
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f9d3 	bl	8000a0a <usart1_sendStructure>

}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	20000000 	.word	0x20000000

08000670 <__NVIC_SetPriority>:
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b7f      	cmp	r3, #127	; 0x7f
 8000684:	d828      	bhi.n	80006d8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000686:	4a2f      	ldr	r2, [pc, #188]	; (8000744 <__NVIC_SetPriority+0xd4>)
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b25b      	sxtb	r3, r3
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	33c0      	adds	r3, #192	; 0xc0
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	589b      	ldr	r3, [r3, r2]
 8000696:	1dfa      	adds	r2, r7, #7
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	0011      	movs	r1, r2
 800069c:	2203      	movs	r2, #3
 800069e:	400a      	ands	r2, r1
 80006a0:	00d2      	lsls	r2, r2, #3
 80006a2:	21ff      	movs	r1, #255	; 0xff
 80006a4:	4091      	lsls	r1, r2
 80006a6:	000a      	movs	r2, r1
 80006a8:	43d2      	mvns	r2, r2
 80006aa:	401a      	ands	r2, r3
 80006ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	019b      	lsls	r3, r3, #6
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	401a      	ands	r2, r3
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	0018      	movs	r0, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	4003      	ands	r3, r0
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c4:	481f      	ldr	r0, [pc, #124]	; (8000744 <__NVIC_SetPriority+0xd4>)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	430a      	orrs	r2, r1
 80006d0:	33c0      	adds	r3, #192	; 0xc0
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	501a      	str	r2, [r3, r0]
}
 80006d6:	e031      	b.n	800073c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <__NVIC_SetPriority+0xd8>)
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	0019      	movs	r1, r3
 80006e0:	230f      	movs	r3, #15
 80006e2:	400b      	ands	r3, r1
 80006e4:	3b08      	subs	r3, #8
 80006e6:	089b      	lsrs	r3, r3, #2
 80006e8:	3306      	adds	r3, #6
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	3304      	adds	r3, #4
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	1dfa      	adds	r2, r7, #7
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	0011      	movs	r1, r2
 80006f8:	2203      	movs	r2, #3
 80006fa:	400a      	ands	r2, r1
 80006fc:	00d2      	lsls	r2, r2, #3
 80006fe:	21ff      	movs	r1, #255	; 0xff
 8000700:	4091      	lsls	r1, r2
 8000702:	000a      	movs	r2, r1
 8000704:	43d2      	mvns	r2, r2
 8000706:	401a      	ands	r2, r3
 8000708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	019b      	lsls	r3, r3, #6
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	401a      	ands	r2, r3
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	0018      	movs	r0, r3
 8000718:	2303      	movs	r3, #3
 800071a:	4003      	ands	r3, r0
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <__NVIC_SetPriority+0xd8>)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	001c      	movs	r4, r3
 8000728:	230f      	movs	r3, #15
 800072a:	4023      	ands	r3, r4
 800072c:	3b08      	subs	r3, #8
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	430a      	orrs	r2, r1
 8000732:	3306      	adds	r3, #6
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	18c3      	adds	r3, r0, r3
 8000738:	3304      	adds	r3, #4
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b003      	add	sp, #12
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	045b      	lsls	r3, r3, #17
 800075c:	429a      	cmp	r2, r3
 800075e:	d301      	bcc.n	8000764 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000760:	2301      	movs	r3, #1
 8000762:	e010      	b.n	8000786 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <SysTick_Config+0x44>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	3a01      	subs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076c:	2301      	movs	r3, #1
 800076e:	425b      	negs	r3, r3
 8000770:	2103      	movs	r1, #3
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ff7c 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x44>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x44>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	e000e010 	.word	0xe000e010

08000794 <main>:
#include "delay.h"
#include "lora.h"

volatile uint16_t ms_timer1 = 100 ;

int main (void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	SystemInit();
 8000798:	f000 f882 	bl	80008a0 <SystemInit>
	SystemCoreClockUpdate();
 800079c:	f000 f886 	bl	80008ac <SystemCoreClockUpdate>
	SYSTEM_MANAGER_Initialize(); // my hardware initialization
 80007a0:	f7ff fe88 	bl	80004b4 <SYSTEM_MANAGER_Initialize>
	SysTick_Config((SystemCoreClock/1000)-1); // Systick 1 ms
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <main+0xa0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	22fa      	movs	r2, #250	; 0xfa
 80007aa:	0091      	lsls	r1, r2, #2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff fca9 	bl	8000104 <__udivsi3>
 80007b2:	0003      	movs	r3, r0
 80007b4:	3b01      	subs	r3, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ffc8 	bl	800074c <SysTick_Config>

	delay_ms(40); // must be a delay for first init LORA
 80007bc:	2028      	movs	r0, #40	; 0x28
 80007be:	f7ff feb7 	bl	8000530 <delay_ms>
	LoraModuleInit();
 80007c2:	f7ff ff3f 	bl	8000644 <LoraModuleInit>
	SetMode(MODE_0_NORMAL);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f7ff feca 	bl	8000560 <SetMode>

	while(1){

			if(!ms_timer1){
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <main+0xa4>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1fa      	bne.n	80007cc <main+0x38>
				if(AUX_Test() != 0){
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <main+0xa8>)
 80007d8:	691a      	ldr	r2, [r3, #16]
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4013      	ands	r3, r2
 80007e0:	d00c      	beq.n	80007fc <main+0x68>
					usart1_sendByte(0xFF); // target adress High Byte
 80007e2:	20ff      	movs	r0, #255	; 0xff
 80007e4:	f000 f8e6 	bl	80009b4 <usart1_sendByte>
					usart1_sendByte(0xFF); // target adress LOW Byte
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	f000 f8e3 	bl	80009b4 <usart1_sendByte>
					usart1_sendByte(0x00); // target channel number
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f8e0 	bl	80009b4 <usart1_sendByte>
					usart1_sendString("messageToSendLora");// send message to other module Lora
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <main+0xac>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f8f2 	bl	80009e0 <usart1_sendString>
				};

				LED2_Toggle()  ;
 80007fc:	23a0      	movs	r3, #160	; 0xa0
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	2204      	movs	r2, #4
 8000804:	4013      	ands	r3, r2
 8000806:	d009      	beq.n	800081c <main+0x88>
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	699a      	ldr	r2, [r3, #24]
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	02c9      	lsls	r1, r1, #11
 8000816:	430a      	orrs	r2, r1
 8000818:	619a      	str	r2, [r3, #24]
 800081a:	e007      	b.n	800082c <main+0x98>
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	699a      	ldr	r2, [r3, #24]
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2104      	movs	r1, #4
 8000828:	430a      	orrs	r2, r1
 800082a:	619a      	str	r2, [r3, #24]
			//	LED1_Toggle()  ;
				ms_timer1 = 200; //for 200 ms
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <main+0xa4>)
 800082e:	22c8      	movs	r2, #200	; 0xc8
 8000830:	801a      	strh	r2, [r3, #0]
			if(!ms_timer1){
 8000832:	e7cb      	b.n	80007cc <main+0x38>
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000008 	.word	0x20000008
 800083c:	50000400 	.word	0x50000400
 8000840:	08000af4 	.word	0x08000af4

08000844 <SysTick_Handler>:

		}
	}


void SysTick_Handler(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	uint16_t n;

	/*** milisecond Counter ***/
	 n = ms_counter ;
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <SysTick_Handler+0x54>)
 800084e:	8812      	ldrh	r2, [r2, #0]
 8000850:	801a      	strh	r2, [r3, #0]
	 if(n) ms_counter = --n;
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <SysTick_Handler+0x28>
 800085a:	1dbb      	adds	r3, r7, #6
 800085c:	1dba      	adds	r2, r7, #6
 800085e:	8812      	ldrh	r2, [r2, #0]
 8000860:	3a01      	subs	r2, #1
 8000862:	801a      	strh	r2, [r3, #0]
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <SysTick_Handler+0x54>)
 8000866:	1dba      	adds	r2, r7, #6
 8000868:	8812      	ldrh	r2, [r2, #0]
 800086a:	801a      	strh	r2, [r3, #0]
	/*** milisecond Timer1 ***/
	 n = ms_timer1;
 800086c:	1dbb      	adds	r3, r7, #6
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <SysTick_Handler+0x58>)
 8000870:	8812      	ldrh	r2, [r2, #0]
 8000872:	801a      	strh	r2, [r3, #0]
	 if (n) ms_timer1 = --n;
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <SysTick_Handler+0x4a>
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	1dba      	adds	r2, r7, #6
 8000880:	8812      	ldrh	r2, [r2, #0]
 8000882:	3a01      	subs	r2, #1
 8000884:	801a      	strh	r2, [r3, #0]
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Handler+0x58>)
 8000888:	1dba      	adds	r2, r7, #6
 800088a:	8812      	ldrh	r2, [r2, #0]
 800088c:	801a      	strh	r2, [r3, #0]

	 }
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	2000002c 	.word	0x2000002c
 800089c:	20000008 	.word	0x20000008

080008a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008b2:	4b3b      	ldr	r3, [pc, #236]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2238      	movs	r2, #56	; 0x38
 80008b8:	4013      	ands	r3, r2
 80008ba:	2b20      	cmp	r3, #32
 80008bc:	d011      	beq.n	80008e2 <SystemCoreClockUpdate+0x36>
 80008be:	d849      	bhi.n	8000954 <SystemCoreClockUpdate+0xa8>
 80008c0:	2b18      	cmp	r3, #24
 80008c2:	d009      	beq.n	80008d8 <SystemCoreClockUpdate+0x2c>
 80008c4:	d846      	bhi.n	8000954 <SystemCoreClockUpdate+0xa8>
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d002      	beq.n	80008d0 <SystemCoreClockUpdate+0x24>
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d00e      	beq.n	80008ec <SystemCoreClockUpdate+0x40>
 80008ce:	e041      	b.n	8000954 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008d0:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 80008d2:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 80008d4:	601a      	str	r2, [r3, #0]
      break;
 80008d6:	e04f      	b.n	8000978 <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 80008da:	22fa      	movs	r2, #250	; 0xfa
 80008dc:	01d2      	lsls	r2, r2, #7
 80008de:	601a      	str	r2, [r3, #0]
      break;
 80008e0:	e04a      	b.n	8000978 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0212      	lsls	r2, r2, #8
 80008e8:	601a      	str	r2, [r3, #0]
      break;
 80008ea:	e045      	b.n	8000978 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	2203      	movs	r2, #3
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	2207      	movs	r2, #7
 80008fe:	4013      	ands	r3, r2
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	2b03      	cmp	r3, #3
 8000908:	d106      	bne.n	8000918 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 800090a:	68f9      	ldr	r1, [r7, #12]
 800090c:	4826      	ldr	r0, [pc, #152]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 800090e:	f7ff fbf9 	bl	8000104 <__udivsi3>
 8000912:	0003      	movs	r3, r0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	e005      	b.n	8000924 <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000918:	68f9      	ldr	r1, [r7, #12]
 800091a:	4824      	ldr	r0, [pc, #144]	; (80009ac <SystemCoreClockUpdate+0x100>)
 800091c:	f7ff fbf2 	bl	8000104 <__udivsi3>
 8000920:	0003      	movs	r3, r0
 8000922:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	227f      	movs	r2, #127	; 0x7f
 800092c:	401a      	ands	r2, r3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	4353      	muls	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0f5b      	lsrs	r3, r3, #29
 800093a:	2207      	movs	r2, #7
 800093c:	4013      	ands	r3, r2
 800093e:	3301      	adds	r3, #1
 8000940:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	6978      	ldr	r0, [r7, #20]
 8000946:	f7ff fbdd 	bl	8000104 <__udivsi3>
 800094a:	0003      	movs	r3, r0
 800094c:	001a      	movs	r2, r3
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e011      	b.n	8000978 <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	0adb      	lsrs	r3, r3, #11
 800095a:	2207      	movs	r2, #7
 800095c:	4013      	ands	r3, r2
 800095e:	2201      	movs	r2, #1
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <SystemCoreClockUpdate+0x100>)
 800096a:	f7ff fbcb 	bl	8000104 <__udivsi3>
 800096e:	0003      	movs	r3, r0
 8000970:	001a      	movs	r2, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000974:	601a      	str	r2, [r3, #0]
      break;
 8000976:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <SystemCoreClockUpdate+0xf4>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	220f      	movs	r2, #15
 8000980:	401a      	ands	r2, r3
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <SystemCoreClockUpdate+0x104>)
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	58d3      	ldr	r3, [r2, r3]
 8000988:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	40da      	lsrs	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b006      	add	sp, #24
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000
 80009a4:	2000000c 	.word	0x2000000c
 80009a8:	007a1200 	.word	0x007a1200
 80009ac:	00f42400 	.word	0x00f42400
 80009b0:	08000b08 	.word	0x08000b08

080009b4 <usart1_sendByte>:

#include <stm32g071xx.h>
#include "uart.h"

void usart1_sendByte(uint8_t byte)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	701a      	strb	r2, [r3, #0]
	while ((USART1->ISR & USART_ISR_TXE_TXFNF) == 0); // TXFIFO not full
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <usart1_sendByte+0x28>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	4013      	ands	r3, r2
 80009ca:	d0fa      	beq.n	80009c2 <usart1_sendByte+0xe>
	                USART1->TDR = byte;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <usart1_sendByte+0x28>)
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40013800 	.word	0x40013800

080009e0 <usart1_sendString>:

void usart1_sendString(const char *string)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
        while (*string) {
 80009e8:	e006      	b.n	80009f8 <usart1_sendString+0x18>
                usart1_sendByte(*string++);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ffde 	bl	80009b4 <usart1_sendByte>
        while (*string) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f4      	bne.n	80009ea <usart1_sendString+0xa>
        }
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <usart1_sendStructure>:
/*** For send configuration structure ***/
void usart1_sendStructure(const void *structure, uint8_t lengthStructure)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	000a      	movs	r2, r1
 8000a14:	1cfb      	adds	r3, r7, #3
 8000a16:	701a      	strb	r2, [r3, #0]
        while (lengthStructure--) {
 8000a18:	e006      	b.n	8000a28 <usart1_sendStructure+0x1e>

        	usart1_sendByte(*(uint8_t*)structure++);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff ffc6 	bl	80009b4 <usart1_sendByte>
        while (lengthStructure--) {
 8000a28:	1cfb      	adds	r3, r7, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	1cfa      	adds	r2, r7, #3
 8000a2e:	1e59      	subs	r1, r3, #1
 8000a30:	7011      	strb	r1, [r2, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f1      	bne.n	8000a1a <usart1_sendStructure+0x10>

        }
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f7ff ff2c 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f000 f811 	bl	8000a94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a72:	f7ff fe8f 	bl	8000794 <main>

08000a76 <LoopForever>:

LoopForever:
  b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a84:	08000b50 	.word	0x08000b50
  ldr r2, =_sbss
 8000a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a8c:	20000030 	.word	0x20000030

08000a90 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_COMP_IRQHandler>
	...

08000a94 <__libc_init_array>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	2600      	movs	r6, #0
 8000a98:	4d0c      	ldr	r5, [pc, #48]	; (8000acc <__libc_init_array+0x38>)
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__libc_init_array+0x3c>)
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	42a6      	cmp	r6, r4
 8000aa2:	d109      	bne.n	8000ab8 <__libc_init_array+0x24>
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	f000 f819 	bl	8000adc <_init>
 8000aaa:	4d0a      	ldr	r5, [pc, #40]	; (8000ad4 <__libc_init_array+0x40>)
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <__libc_init_array+0x44>)
 8000aae:	1b64      	subs	r4, r4, r5
 8000ab0:	10a4      	asrs	r4, r4, #2
 8000ab2:	42a6      	cmp	r6, r4
 8000ab4:	d105      	bne.n	8000ac2 <__libc_init_array+0x2e>
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	00b3      	lsls	r3, r6, #2
 8000aba:	58eb      	ldr	r3, [r5, r3]
 8000abc:	4798      	blx	r3
 8000abe:	3601      	adds	r6, #1
 8000ac0:	e7ee      	b.n	8000aa0 <__libc_init_array+0xc>
 8000ac2:	00b3      	lsls	r3, r6, #2
 8000ac4:	58eb      	ldr	r3, [r5, r3]
 8000ac6:	4798      	blx	r3
 8000ac8:	3601      	adds	r6, #1
 8000aca:	e7f2      	b.n	8000ab2 <__libc_init_array+0x1e>
 8000acc:	08000b48 	.word	0x08000b48
 8000ad0:	08000b48 	.word	0x08000b48
 8000ad4:	08000b48 	.word	0x08000b48
 8000ad8:	08000b4c 	.word	0x08000b4c

08000adc <_init>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	469e      	mov	lr, r3
 8000ae6:	4770      	bx	lr

08000ae8 <_fini>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr
